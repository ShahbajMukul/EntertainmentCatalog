@page "/"
@inject StorageService StorageService

<PageTitle>My Reviews</PageTitle>

<h1>My Reviews</h1>


@if(reviews.Count < 1)
{
    <div class="d-flex flex-column justify-space-between" style="min-height: 85vh;">
        <div class="flex-grow-1">
            <MudAlert Severity="Severity.Info" Variant="Variant.Filled" Elevation="3">You have not reviewed any films or TV-shows. Please rate films and then check back!</MudAlert>
        </div>

        <!-- Button at bottom -->
        <div class="px-4 pb-5">
            <MudButton Href="rate"
                       StartIcon="@Icons.Material.Outlined.RateReview"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       FullWidth="true">
                Rate a Film
            </MudButton>
        </div>
    </div>

}

@foreach (var review in reviews)
{
    <MudPaper Class="my-2 pa-4" Elevation="3" >
        <div class="d-flex gap-4">
            <MudImage Src="@review.Poster" Width="100" Height="150" ObjectFit="ObjectFit.Cover" Class="rounded mx-n2" />
            <div>
                <div class="d-flex align-center">
                    <!-- Rating Section -->
                    <MudTooltip Text="Movie Rating">
                        <div class="d-flex align-center">
                            <MudIcon Icon="@Icons.Material.Filled.Star" Color="Color.Warning"></MudIcon>
                            <MudText Typo="Typo.body2"
                                     Class="ms-1 font-weight-bold">
                                @review.Rating/10
                            </MudText>
                        </div>
                    </MudTooltip>

                    <!-- Rewatch Status Section -->
                    <MudTooltip Text="@(review.WillWatchAgain ? "Worth watching again" : "Not worth rewatching")">
                        <div class="d-flex align-center">
                            @if (review.WillWatchAgain)
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Replay"
                                         Color="Color.Success"
                                         Class="me-1" />
                                <MudText Color="Color.Success"
                                         Typo="Typo.caption">
                                    Rewatch Worthy
                                </MudText>
                            }
                            else
                            {
                                <MudIcon Icon="@Icons.Material.Filled.NotInterested"
                                         Color="Color.Error"
                                         Class="me-1" />
                                <MudText Color="Color.Error"
                                         Typo="Typo.caption">
                                    Skip Rewatch
                                </MudText>
                            }
                        </div>
                    </MudTooltip>

                    <!-- Date Section -->
                    <MudTooltip Text="Review Date">
                        <div class="d-flex align-center me-1">
                            <MudIcon Icon="@Icons.Material.Filled.Schedule"
                                     Color="Color.Default"
                                     Class="me-1"
                                     Size="Size.Small" />
                            <MudText Typo="Typo.caption"
                                     Color="Color.Secondary">
                                @review.ReviewDate.ToString("MMM dd, yyyy")
                            </MudText>
                        </div>
                    </MudTooltip>
                </div>
                <MudCard Elevation="0" Class="border-1 me-2">
                    <MudCardContent>
                        <MudText Typo="Typo.body2">@review.ReviewText</MudText>
                    </MudCardContent>
                </MudCard>
            </div>
        </div>
    </MudPaper>

}


@code {
    private List<ReviewDetails> reviews = new List<ReviewDetails>();

    protected override async Task OnInitializedAsync()
    {
        reviews = StorageService.LoadReviews();
    }

}
